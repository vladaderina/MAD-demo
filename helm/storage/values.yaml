postgresql:
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 17.2.0-debian-12-r10
    pullPolicy: IfNotPresent
    pullSecrets:
      - docker-creds
  auth:
    username: postgres
    database: postgres
    existingSecret: "db-creds"
    secretKeys:
      adminPasswordKey: "postgres-root-pass"
  primary:
    readinessProbe:
      initialDelaySeconds: 15
    livenessProbe:
      initialDelaySeconds: 15
    service:
      type: NodePort
      nodePorts:
        postgresql: "30000"
    extraEnvVarsSecret: "db-creds"
    pgHbaConfiguration: |
      # TYPE  DATABASE  USER  ADDRESS      METHOD
      host    all       all   0.0.0.0/0    trust
      host    all       all   ::/0         trust
      local   all       all                trust
    initdb:
      scripts:
        01-create-grafana-db.sql: |
          CREATE DATABASE grafana;
          CREATE DATABASE ml_models;

        02-roles-db.sql: |-
          CREATE ROLE grafana WITH LOGIN PASSWORD '${GRAFANA_PASSWORD}';
          CREATE ROLE mad WITH LOGIN PASSWORD '${MAD_PASSWORD}';
          GRANT CONNECT ON DATABASE grafana TO grafana;

        03-ml-models-init.sql: |-
          \connect ml_models
          CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
          ALTER SCHEMA public OWNER TO mad;

        04-create-tables.sql: |-
          \connect ml_models
          -- 1. Таблица метрик
          CREATE TABLE IF NOT EXISTS metrics (
              id SERIAL PRIMARY KEY,
              name VARCHAR(255) NOT NULL UNIQUE,
              status VARCHAR(20) NOT NULL CHECK (status IN ('active', 'deactive')),
              query TEXT NOT NULL UNIQUE,
              step INTEGER NOT NULL DEFAULT 60
          );

          -- 2. Таблица с информацией о моделях
          CREATE TABLE IF NOT EXISTS models_info (
              id SERIAL PRIMARY KEY,
              name VARCHAR(255) NOT NULL UNIQUE,
              metric_id INTEGER NOT NULL REFERENCES metrics(id) ON DELETE CASCADE,
              max_stored_versions INTEGER NOT NULL DEFAULT 3,
              hyperparams_mode VARCHAR(20) NOT NULL CHECK (hyperparams_mode IN ('manual', 'optuna')) DEFAULT 'optuna',
              active_version VARCHAR(255),
              training_start TIMESTAMP WITH TIME ZONE NOT NULL,
              training_end TIMESTAMP WITH TIME ZONE NOT NULL, 
              step INTEGER NOT NULL DEFAULT 30
          );

          -- 3. Таблица моделей
          CREATE TABLE IF NOT EXISTS models (
              id SERIAL PRIMARY KEY,
              model_data BYTEA,
              created_at TIMESTAMP WITH TIME ZONE,
              status VARCHAR(20) NOT NULL CHECK (status IN ('active', 'deactive', 'training', 'waiting'))  DEFAULT 'waiting',
              version VARCHAR(255) NOT NULL DEFAULT '1',
              model_id INTEGER NOT NULL REFERENCES models_info(id) ON DELETE CASCADE,
              hyperparams JSONB
          );

          -- 4. Таблица ошибок предсказаний
          CREATE TABLE IF NOT EXISTS prediction_errors (
              id SERIAL PRIMARY KEY,
              model_id INTEGER NOT NULL REFERENCES models(id) ON DELETE CASCADE,
              metric_id INTEGER NOT NULL REFERENCES metrics(id) ON DELETE CASCADE,
              timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
              error_value DOUBLE PRECISION NOT NULL,
              predicted_value DOUBLE PRECISION NOT NULL,
              actual_value DOUBLE PRECISION NOT NULL,
              anomaly_threshold DOUBLE PRECISION NOT NULL,
              CONSTRAINT unique_error_point UNIQUE (model_id, metric_id, timestamp)
          );

          -- 5. Таблица аномальных точек
          CREATE TABLE IF NOT EXISTS anomaly_points (
              id SERIAL PRIMARY KEY,
              model_id INTEGER NOT NULL REFERENCES models(id) ON DELETE CASCADE,
              metric_id INTEGER NOT NULL REFERENCES metrics(id) ON DELETE CASCADE,
              timestamp TIMESTAMP WITH TIME ZONE NOT NULL
              prediction_error_id INTEGER REFERENCES prediction_errors(id) ON DELETE SET NULL;
          );

          -- 6. Таблица системных аномалий
          CREATE TABLE IF NOT EXISTS anomaly_system (
              id SERIAL PRIMARY KEY,
              start_time TIMESTAMP WITH TIME ZONE NOT NULL,
              end_time TIMESTAMP WITH TIME ZONE,
              anomaly_type VARCHAR(20) NOT NULL CHECK (anomaly_type IN ('local', 'group', 'global')),
              average_anom_score INTEGER NOT NULL,
              metric_id INTEGER NOT NULL REFERENCES metrics(id) ON DELETE CASCADE,
              description VARCHAR(255) NOT NULL DEFAULT 'Detected by MAD'
          );

          -- 7. Связующая таблица моделей и метрик
          CREATE TABLE IF NOT EXISTS features (
              model_id INTEGER NOT NULL REFERENCES models_info(id) ON DELETE CASCADE,
              metric_id INTEGER NOT NULL REFERENCES metrics(id) ON DELETE CASCADE,
              PRIMARY KEY (model_id, metric_id)
          );
       
        05-create-indexes.sql: |-
          \connect ml_models
          CREATE INDEX idx_metrics_status ON metrics (status);
          CREATE INDEX idx_models_status ON models (status);
          CREATE INDEX idx_models_active_version ON models (active_version);
          CREATE INDEX idx_models_version_model_id ON models_version (model_id);
          CREATE INDEX idx_anomaly_points_timestamp ON anomaly_points (timestamp);
          CREATE INDEX idx_anomaly_system_metric_id ON anomaly_system (metric_id);
          CREATE INDEX IF NOT EXISTS prediction_errors_model_metric_idx ON prediction_errors (model_id, metric_id);
          CREATE INDEX IF NOT EXISTS prediction_errors_timestamp_idx ON prediction_errors (timestamp);

        06-roles.sql: |-
          GRANT ALL PRIVILEGES ON DATABASE ml_models TO mad;
          GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO mad;
          GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO mad;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public 
          GRANT ALL PRIVILEGES ON TABLES TO mad;

        07-create-trigger.sql: |-
          \connect ml_models
          CREATE OR REPLACE FUNCTION notify_model_status_change()
          RETURNS trigger AS $$
          BEGIN
            IF NEW.status = 'waiting' THEN
              PERFORM pg_notify('model_training_queue', NEW.id::text);
            END IF;
            RETURN NEW;
          END;
          $$ LANGUAGE plpgsql;

          CREATE TRIGGER model_training_trigger
          AFTER INSERT OR UPDATE OF status ON models
          FOR EACH ROW EXECUTE FUNCTION notify_model_status_change();

          CREATE OR REPLACE FUNCTION notify_model_change()
          RETURNS TRIGGER AS $$
          DECLARE
              payload TEXT;
          BEGIN
              IF TG_OP = 'INSERT' AND NEW.status = 'active' THEN
                  payload := json_build_object(
                      'action', 'activate',
                      'model_id', NEW.id,
                      'model_info_id', NEW.model_id
                  );
              ELSIF TG_OP = 'UPDATE' AND NEW.status != OLD.status THEN
                  IF NEW.status = 'active' THEN
                      payload := json_build_object(
                          'action', 'activate',
                          'model_id', NEW.id,
                          'model_info_id', NEW.model_id
                      );
                  ELSE
                      payload := json_build_object(
                          'action', 'deactivate',
                          'model_id', NEW.id,
                          'model_info_id', NEW.model_id
                      );
                  END IF;
              ELSIF TG_OP = 'UPDATE' THEN
                  payload := json_build_object(
                      'action', 'update',
                      'model_id', NEW.id,
                      'model_info_id', NEW.model_id
                  );
              ELSIF TG_OP = 'DELETE' THEN
                  payload := json_build_object(
                      'action', 'deactivate',
                      'model_id', OLD.id,
                      'model_info_id', OLD.model_id
                  );
              END IF;
              
              PERFORM pg_notify('model_changes', payload);
              RETURN NEW;
          END;
          $$ LANGUAGE plpgsql;

          CREATE OR REPLACE FUNCTION notify_version_change()
          RETURNS TRIGGER AS $$
          BEGIN
              IF NEW.active_version IS DISTINCT FROM OLD.active_version THEN
                  PERFORM pg_notify('model_changes', 
                      json_build_object(
                          'action', 'version_change',
                          'model_info_id', NEW.id
                      )::text);
              END IF;
              RETURN NEW;
          END;
          $$ LANGUAGE plpgsql;

          CREATE TRIGGER version_change_trigger
          AFTER UPDATE OF active_version ON models_info
          FOR EACH ROW EXECUTE FUNCTION notify_version_change();